#include <stdio.h>
#include <stdbool.h>

void calculateTimes(int n, int at[], int bt[], int wt[], int tat[], int ct[]) {
    bool completed[n];
    int currentTime = 0, completedProcesses = 0;

    // Initialize all processes as not completed
    for (int i = 0; i < n; i++) {
        completed[i] = false;
    }

    while (completedProcesses < n) {
        int shortest = -1, minBurst = 1e9;

        // Find the process with the shortest burst time that has arrived
        for (int i = 0; i < n; i++) {
            if (!completed[i] && at[i] <= currentTime && bt[i] < minBurst) {
                minBurst = bt[i];
                shortest = i;
            }
        }

        if (shortest == -1) {
            currentTime++; // No process available, increment time
            continue;
        }

        // Execute the selected process
        currentTime += bt[shortest];
        ct[shortest] = currentTime;
        tat[shortest] = ct[shortest] - at[shortest];
        wt[shortest] = tat[shortest] - bt[shortest];
        completed[shortest] = true;
        completedProcesses++;
    }
}

void displayResults(int n, int at[], int bt[], int ct[], int wt[], int tat[]) {
    float totalWT = 0, totalTAT = 0;

    printf("Process\tArrival\tBurst\tCompletion\tTurnaround\tWaiting\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t\t%d\t\t%d\n", i + 1, at[i], bt[i], ct[i], tat[i], wt[i]);
        totalWT += wt[i];
        totalTAT += tat[i];
    }

    printf("\nAverage Waiting Time: %.2f\n", totalWT / n);
    printf("Average Turnaround Time: %.2f\n", totalTAT / n);
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    int at[n], bt[n], wt[n], tat[n], ct[n];

    printf("Enter the arrival time and burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d Arrival Time: ", i + 1);
        scanf("%d", &at[i]);
        printf("Process %d Burst Time: ", i + 1);
        scanf("%d", &bt[i]);
    }

    calculateTimes(n, at, bt, wt, tat, ct);
    displayResults(n, at, bt, ct, wt, tat);

    return 0;
}
